{"version":3,"file":"color.js","sourceRoot":"","sources":["file:///D:/projects/esi2d/src/color.ts"],"names":[],"mappings":"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","sourcesContent":["export class Color {\r\n  \r\n\tstatic White   = new Color(255, 255, 255);\r\n\r\n\tstatic Black   = new Color(0, 0, 0);\r\n\r\n\tstatic Red     = new Color(255, 0, 0);\r\n\r\n\tstatic Green   = new Color(0, 255, 0);\r\n\r\n\tstatic Blue    = new Color(0, 0, 255);\r\n\r\n\tstatic Yellow  = new Color(255, 255, 0);\r\n\r\n\tstatic Cyan    = new Color(0, 255, 255);\r\n\r\n\tstatic Purple  = new Color(255, 0, 255);\r\n\r\n  static parse(colorString: string): Color {\r\n\r\n    colorString = colorString.replace(/\\s/g, '');\r\n\r\n    var hexRegex = /#[0-9a-fA-F]{3,6}/,\r\n        rgbRegex = /rgb.?([0-9.]+),([0-9.]+),([0-9.]+)/,\r\n        rgbaRegex = /rgba.?([0-9.]+),([0-9.]+),([0-9.]+),([0-9.]+)/,\r\n        match;\r\n\r\n    switch (true) {\r\n      case hexRegex.test(colorString): {\r\n        return Color.createByHexRgb(colorString);\r\n      }\r\n\r\n      case rgbaRegex.test(colorString): {\r\n        match = colorString.match(rgbaRegex);\r\n        return new Color(\r\n          parseInt(match[1]),\r\n          parseInt(match[2]),\r\n          parseInt(match[3]),\r\n          parseFloat(match[4]));\r\n      }\r\n\r\n      case rgbRegex.test(colorString): {\r\n        match = colorString.match(rgbRegex);\r\n        return new Color(\r\n          parseInt(match[1]),\r\n          parseInt(match[2]),\r\n          parseInt(match[3]));\r\n      }\r\n\r\n      default: {\r\n        throw new TypeError('unknown color ' + colorString);\r\n      }\r\n    }\r\n  }\r\n\r\n  static createByHexRgb(hexColorString: string): Color {\r\n    hexColorString = hexColorString.replace(' ', '').replace('#', '');\r\n\r\n    if (hexColorString.length === 3) {\r\n      return new Color(\r\n        parseInt(hexColorString[0] + hexColorString[0], 16),\r\n        parseInt(hexColorString[1] + hexColorString[1], 16),\r\n        parseInt(hexColorString[2] + hexColorString[2], 16));\r\n    } else {\r\n      for (var i = 0; i < (6 - hexColorString.length); i++) {\r\n        hexColorString += 'f';\r\n      }\r\n      return new Color(\r\n        parseInt(hexColorString.slice(0, 2), 16),\r\n        parseInt(hexColorString.slice(2, 4), 16),\r\n        parseInt(hexColorString.slice(4, 6), 16));\r\n    }\r\n  }\r\n\r\n  constructor(public red: number|string = 255,\r\n              public green: number = 255,\r\n              public blue: number = 255,\r\n              public alpha: number = 255) {\r\n    \r\n    if (typeof arguments[0] === 'string') {\r\n      return Color.parse(arguments[0]);\r\n    }\r\n\r\n    this.setAlpha(alpha);\r\n  }\r\n\r\n  toString(): string {\r\n    return 'rgba(' + this.red + ',' + this.green + ',' + this.blue + ',' + this.alpha + ')';\r\n  }\r\n\r\n  toHexString(): string {\r\n    var r = this.red.toString(16);\r\n    var g = this.green.toString(16);\r\n    var b = this.blue.toString(16);\r\n    if (r.length < 2) r = '0' + r;\r\n    if (g.length < 2) g = '0' + g;\r\n    if (b.length < 2) b = '0' + b;\r\n    return '#' + r + g + b;\r\n  }\r\n\r\n  setAlpha(alpha: number): void {\r\n    if (alpha <= 1) {\r\n      alpha = Math.floor(alpha * 255);\r\n    }\r\n\r\n    this.alpha = alpha;\r\n  }\r\n\r\n}"]}