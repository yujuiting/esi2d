{"version":3,"file":"polygon.js","sourceRoot":"","sources":["file:///D:/projects/esi2d/src/polygon.ts"],"names":[],"mappings":"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","sourcesContent":["import { Rectangle } from './rectangle';\r\nimport { Point } from './point';\r\nimport { Line } from './line';\r\n\r\nexport class Polygon extends Rectangle {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  points: Point[] = [];\r\n\r\n  sides: Line[] = [];\r\n\r\n  translate(point: Point): void {\r\n    for (let i: number = 0; i < this.points.length; i++) {\r\n      this.points[i].translate(point);\r\n    }\r\n    this.calculateBoundary();\r\n  }\r\n\r\n  addPoint(point: Point): boolean {\r\n    if (this.indexOf(point) !== -1) {\r\n      return false;\r\n    }\r\n\r\n    this.points.push(point);\r\n\r\n    this.calculateBoundary();\r\n\r\n    this.calculateSides();\r\n\r\n    return true;\r\n  }\r\n\r\n  removePoint(point: Point): boolean {\r\n    let index: number = this.indexOf(point);\r\n    if (index === -1) {\r\n      return false;\r\n    }\r\n\r\n    this.points = this.points.splice(index, 1);\r\n\r\n    this.calculateBoundary();\r\n\r\n    this.calculateSides();\r\n\r\n    return true;\r\n  }\r\n\r\n  indexOf(point: Point): number {\r\n    return this.points.indexOf(point);\r\n  }\r\n\r\n  containPoint(point: Point): boolean {\r\n    if (!Rectangle.prototype.containPoint.call(this, point))\r\n      return false;\r\n\r\n    let pointOutside: Point = new Point(-1, -1);\r\n\r\n    let rayLine: Line = new Line(pointOutside, point);\r\n\r\n    let line: Line;\r\n    let collideCount: number = 0;\r\n\r\n    for (let i = 0; i < this.sides.length; i++) {\r\n      line = this.sides[i];\r\n      if (line.intersect(rayLine))\r\n        collideCount++;\r\n    }\r\n\r\n    if (collideCount % 2 === 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n  private calculateBoundary() {\r\n    let point: Point = this.points[0];\r\n    let minX: number = point.x;\r\n    let maxX: number = point.x;\r\n    let minY: number = point.y;\r\n    let maxY: number = point.y;\r\n\r\n    for (let i = 1; i < this.points.length; i++) {\r\n      point = this.points[i];\r\n\r\n      if (point.x < minX) {\r\n        minX = point.x;\r\n      } else if (point.x > maxX) {\r\n        maxX = point.x;\r\n      }\r\n\r\n      if (point.y < minY) {\r\n        minY = point.y;\r\n      } else if (point.y > maxY) {\r\n        maxY = point.y;\r\n      }\r\n    }\r\n\r\n    this.position.x = minX;\r\n    this.position.y = minY;\r\n    this.width = maxX - minX;\r\n    this.height = maxY - minY;\r\n  }\r\n\r\n  private calculateSides () {\r\n    if (this.points.length < 2)\r\n      return;\r\n\r\n    this.sides = [];\r\n\r\n    for (let i: number = 0; i < this.points.length - 1; i++) {\r\n      for (let j: number = i + 1; j < this.points.length; j++) {\r\n        this.sides.push(new Line(this.points[i], this.points[j]));\r\n      }\r\n    }\r\n  }\r\n\r\n}"]}