{"version":3,"file":"line.js","sourceRoot":"","sources":["file:///D:/projects/esi2d/src/line.ts"],"names":[],"mappings":";AAEA;IACE,cAAmB,MAAa,EACb,MAAa;QADb,WAAM,GAAN,MAAM,CAAO;QACb,WAAM,GAAN,MAAM,CAAO;IAAG,CAAC;IAEpC,qBAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,wBAAS,GAAT,UAAU,IAAU;QAClB,uGAAuG;QAEvG,kBAAkB;QAClB,oCAAoC;QACpC,IAAI,EAAU,EAAE,EAAU,EAAE,EAAU,EAClC,EAAU,EAAE,EAAU,EAAE,EAAU,EAClC,EAAU,EAAE,EAAU,CAAC;QAE3B,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACnC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACnC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAEnE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAClD,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAElD,0DAA0D;QAC1D,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC;YAChB,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACnC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACnC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAEnE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAClD,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAElD,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC;YAChB,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,YAAY;QACZ,wCAAwC;QACxC,iBAAiB;QAEjB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH,WAAC;AAAD,CAAC,AAhDD,IAgDC;AAhDY,YAAI,OAgDhB,CAAA","sourcesContent":["import { Point } from './point';\r\n\r\nexport class Line {\r\n  constructor(public point1: Point,\r\n              public point2: Point) {}\r\n\r\n  length(): number {\r\n    return this.point1.distanceTo(this.point2);\r\n  }\r\n\r\n  intersect(line: Line): boolean {\r\n    // http://stackoverflow.com/questions/217578/how-can-i-determine-whether-a-2d-point-is-within-a-polygon\r\n\r\n    // aX + bY + c = 0\r\n    // Get linear equation for this line\r\n    let a1: number, b1: number, c1: number,\r\n        a2: number, b2: number, c2: number,\r\n        d1: number, d2: number;\r\n\r\n    a1 = this.point2.y - this.point1.y;\r\n    b1 = this.point1.x - this.point2.x;\r\n    c1 = this.point2.x * this.point1.y - this.point1.x * this.point2.y;\r\n\r\n    d1 = a1 * line.point1.x + b1 * line.point1.y + c1;\r\n    d2 = a1 * line.point2.x + b1 * line.point2.y + c1;\r\n\r\n    // determine the 2 points of anthoer line are at same side\r\n    if (d1 > 0 && d2 > 0 ||\r\n        d1 < 0 && d2 < 0) {\r\n      return false;\r\n    }\r\n\r\n    a2 = line.point2.y - line.point1.y;\r\n    b2 = line.point1.x - line.point2.x;\r\n    c2 = line.point2.x * line.point1.y - line.point1.x * line.point2.y;\r\n\r\n    d1 = a2 * this.point1.x + b2 * this.point1.y + c2;\r\n    d2 = a2 * this.point2.x + b2 * this.point2.y + c2;\r\n\r\n    if (d1 > 0 && d2 > 0 ||\r\n        d1 < 0 && d2 < 0) {\r\n      return false;\r\n    }\r\n\r\n    // collinear\r\n    // if (parseInt(a1 * b2 - a2 * b1) == 0)\r\n    //   return true;\r\n\r\n    return true;\r\n  }\r\n}"]}